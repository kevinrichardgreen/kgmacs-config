#+TITLE: Configuration file for Kevin Green's emacs

* Fundamentals/defaults

Sensible defaults, courtesy of [[https://github.com/hrs/sensible-defaults.el][Harry R. Schwartz]].

#+BEGIN_SRC emacs-lisp
  (load-file (expand-file-name "sensible-defaults.el" user-emacs-directory))

  (sensible-defaults/bind-commenting-and-uncommenting)
  (sensible-defaults/bind-keys-to-change-text-size)

  (sensible-defaults/increase-gc-threshold)
  (sensible-defaults/delete-trailing-whitespace)
  (sensible-defaults/treat-camelcase-as-separate-words)
  (sensible-defaults/make-scripts-executable)
  (sensible-defaults/single-space-after-periods)
  (sensible-defaults/offer-to-create-parent-directories-on-save)
  (sensible-defaults/ensure-that-files-end-with-newline)
  (sensible-defaults/quiet-startup)
  (sensible-defaults/make-dired-file-sizes-human-readable)
  (sensible-defaults/shorten-yes-or-no)
  (sensible-defaults/always-highlight-code)
  (sensible-defaults/refresh-buffers-when-files-change)
  (sensible-defaults/show-matching-parens)
  (setq show-paren-style 'expression)     ;; NOTE this goes well with above
  (sensible-defaults/flash-screen-instead-of-ringing-bell)
  (sensible-defaults/yank-to-point-on-mouse-click)
#+END_SRC

Font.  (set in a way that will work with emacsclient frames)

#+BEGIN_SRC emacs-lisp
(setq default-frame-alist '((font . "Monospace-8")))
#+END_SRC

Handle the top bars.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode 1)
#+END_SRC

Line & column numbers

#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

Disable automatic 'electric' indent (it conflicts with other things!)

#+BEGIN_SRC emacs-lisp
  (electric-indent-mode 0)
#+END_SRC

Smoother scrolling, scroll bar handling

#+BEGIN_SRC emacs-lisp
  (set-scroll-bar-mode nil) ; position of scroll bar
  (setq                     ; smoother scrolling
    scroll-margin 1                   ;; how far from edge before scroll
    scroll-conservatively 100    ;; scroll nicely
    scroll-preserve-screen-position 1) ;; maintain position when pgup/dwn
#+END_SRC

An awesome tool for traversing the undo/redo tree.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+END_SRC

Remember position in a file: keeps ~/ clean,  activated on all buffers

#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :init (save-place-mode))
#+END_SRC

Line numbering - relative line numbers in programming and text modes only.

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :config
    (setq relative-line-numbers-motion-function 'forward-visible-line)
    (add-hook 'text-mode-hook 'linum-relative-mode)
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC

Global line highlighting

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC


Allow certain functions that are disabled by default.

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'set-goal-column 'disabled nil)
  (put 'scroll-left 'disabled nil)
  (put 'scroll-right 'disabled nil)
#+END_SRC

Scroll buffer in place: [[http://stackoverflow.com/questions/8993183/emacs-scroll-buffer-not-point][StackOverflow]]

#+BEGIN_SRC emacs-lisp
  (defun scroll-down-in-place (n)
    "Scroll the buffer down, keeping the point in place."
    (interactive "p")
    (next-line n)
    (unless (eq (window-start) (point-min))
      (scroll-down n)))

  (defun scroll-up-in-place (n)
    "Scroll the buffer up, keeping the point in place."
    (interactive "p")
    (previous-line n)
    (unless (eq (window-end) (point-max))
      (scroll-up n)))

  (global-set-key "\M-n" 'scroll-up-in-place)
  (global-set-key "\M-p" 'scroll-down-in-place)
#+END_SRC

Use spaces in ~align-regexp~ instead of tabs. - uses old advice syntax

#+BEGIN_SRC emacs-lisp
  (defadvice align-regexp (around align-regexp-with-spaces activate)
    (let ((indent-tabs-mode nil))
      ad-do-it))
#+END_SRC

Browsing the kill ring

#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring+
    :config
    (browse-kill-ring-default-keybindings))
#+END_SRC

Backup settings. Courtesy of [[http://stackoverflow.com/a/20824625][Stack Overflow]]

#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     delete-old-versions t
     kept-new-versions 10
     kept-old-versions 0
     version-control t)       ; use versioned backups
  (setq vc-make-backup-files t)
  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.emacs_backups/per-save")))

  (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs_backups/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))
  (add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC

** Web

Ask for eww open

#+BEGIN_SRC emacs-lisp
  (defalias 'gk-urls-external-browser 'browse-url-xdg-open)

  (defun gk-browse-url (&rest args)
    "Prompt for whether or not to browse with EWW, if no browse
  with external browser."
    (apply
     (if (y-or-n-p "Browse with EWW? ")
         'eww-browse-url
       'gk-urls-external-browser)
     args))

  (setq browse-url-browser-function #'gk-browse-url)
#+END_SRC

** Compilation

Global bindings for fast compile, auto-scroll of compilation window.

#+BEGIN_SRC emacs-lisp
  (global-set-key [f9] 'compile)
  (global-set-key [f10] 'recompile)
  (global-set-key [f12] 'gdb)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
  (setq compilation-auto-jump-to-first-error t)
  (setq compilation-skip-threshold 2) ; don't worry about warnings!
#+END_SRC

* English

~flyspell~ for text files and code files
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

* Frames only

=frames-only-mode= to be used with my newly acquired Xmonad setup.
Basically, this mode changes emacs default behaviour so that instead
of opening windows, it opens frames.  The benefit to this is that
the frames can be navigated by the window manager's shortcuts.

THIS DOES NOT WORK NEARLY AS WELL AS I HAD HOPED.

A better solution seems to be to just manage a couple of frames
manually, using emacs interior commands if they split to windows.

#+BEGIN_SRC emacs-lisp
  ;; (use-package frames-only-mode
  ;;   :config
  ;;   (frames-only-mode 1))
#+END_SRC

* Dired mode

Open certain directories in dired.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c o")
                  (lambda () (interactive) (find-file "~/Dropbox/Documents/")))
  (global-set-key (kbd "C-c r")
                  (lambda () (interactive) (find-file "~/repositories/")))
#+END_SRC

Omit hidden files from view in dired

#+BEGIN_SRC emacs-lisp
;;  (setq dired-omit-files "^\\...+$")
;;  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))
#+END_SRC

~Wdired~ mode.  Allow changing permissions.

#+BEGIN_SRC emacs-lisp
  (setq wdired-allow-to-change-permissions t)
#+END_SRC

* IDO mode

This is probably the best thing for emacs
usability. =ido-vertical-mode= is tremendous. Seriously, just use
this everywhere.

*Note* yes I do know about helm and ivy, but I haven't seen a good
enough reason to switch.

Also, only use C-n, C-p in an ido vertical buffer to cycle through.

#+BEGIN_SRC emacs-lisp
  ;; (use-package ido-vertical-mode
  ;;   :config
  ;;   (setq ido-enable-flex-matching t)
  ;;   (setq ido-everywhere t)
  ;;   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  ;;   (ido-mode 1)
  ;;   (ido-vertical-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ivy :demand
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    (ivy-mode 1))
#+END_SRC
* Color themes

I use =moe-theme=, which is actually much more than just a color
theme.  It's more of an overall style theme.

#+BEGIN_SRC emacs-lisp
  (use-package moe-theme
    :init
    (setq calendar-latitude +52)
    (setq calendar-longitude -106)
    (setq moe-theme-resize-org-title '(1.3 1.1 1.1 1.1 1.0 1.0 1.0 1.0 1.0))
    :config
    (moe-theme-set-color 'orange)
    (moe-dark)
    )
#+END_SRC

* Org mode

=org-mode= is arguably the workhorse of emacs.  Making sure it behaves
as you wish is critical to having a good emacs experience.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind
    (("C-c C-l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture))
    :config
    (setq org-use-speed-commands t)
    (setq org-fontify-whole-heading-lines t)
    (setq org-html-validation-link nil)
    (setq org-startup-with-inline-images t)
    (setq org-startup-with-latex-preview t)
    (setq org-image-actual-width 400)
    (setq org-startup-indented t)
    (setq org-hide-emphasis-markers t)
    (setq org-src-fontify-natively t)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 6.0))
    ;; Fancy bullets
    (use-package org-bullets
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-hide-leading-stars t))
    ;; References inside org-mode documents
    (use-package org-ref
      :config
      (with-eval-after-load 'org
        (setq org-ref-notes-directory "~/Dropbox/Documents/notes/reading"
              org-ref-bibliography-notes "~/Dropbox/Documents/index.org"
              org-ref-default-bibliography '("~/Dropbox/Documents/index.bib")
              org-ref-pdf-directory '("~/Dropbox/Documents/pdf_books/" "~/Dropbox/Documents/pdf_papers"))
        (setq helm-bibtex-bibliography "~/Dropbox/Documents/index.bib"
              helm-bibtex-library-path '("~/Dropbox/Documents/pdf_books/" "~/Dropbox/Documents/pdf_papers")
              helm-bibtex-notes-path "~/Dropbox/Documents/notes/reading"
              bibtex-completion-bibliography "~/Dropbox/Documents/index.bib"
              bibtex-completion-notes-path "~/Dropbox/Documents/index.org")))
    (use-package ivy-bibtex)
    ;; Managing bibtex entries
    (use-package bibtex-utils
      :config
      (setq bu-bibtex-fields-ignore-list '("keywords" "abstract" "file" "issn" "annote"))
      (setq bibtex-align-at-equal-sign t)
      (add-hook 'bibtex-mode-hook (lambda () (set-fill-column 2000))))
    ;; Some export modes here
    (use-package htmlize)  ; for source code block syntax highlighting
    (use-package ox-twbs)  ; Twitter-bootstrap formatted html
    (use-package ox-reveal
      :config
      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq org-reveal-mathjax t))
    ;; sync with Google Calendar
    (setq package-check-signature nil)
    (use-package org-gcal
      :ensure t
      :config
      (load "~/Dropbox/Documents/gtd/gcal-details")
      (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
      (add-hook 'org-save-all-org-buffers (lambda () (org-gcal-sync) )))
      ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
    ;; GTD things
    (setq org-agenda-files '("~/Dropbox/Documents/gtd/gcal.org"
                             "~/Dropbox/Documents/gtd/inbox.org"
                             "~/Dropbox/Documents/gtd/work.org"
                             "~/Dropbox/Documents/gtd/personal.org"))
    (setq org-refile-targets '(("~/Dropbox/Documents/gtd/work.org" :maxlevel . 3)
                               ("~/Dropbox/Documents/gtd/personal.org" :maxlevel . 3)
                               ("~/Dropbox/Documents/gtd/someday.org" :level . 1)))
    ;; Capture templates
    (setq org-capture-templates
          '(
            ("a" "Appointment" entry (file  "~/Dropbox/Documents/gtd/gcal.org" )
             "* %?\n\n%^T\n\n")
            ("t" "Todo [inbox]" entry
             (file "~/Dropbox/Documents/gtd/inbox.org")
             "* TODO %i%?")))
    (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "IN-PROGRESS(p)" "|" "DONE(d)" "CANCELLED(c)")))

    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps t)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-agenda-start-on-weekday nil)
    (setq org-agenda-todo-ignore-scheduled "all")
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-deadline-warning-days 5)
    (setq org-log-done 'time)
    (setq org-use-property-inheritance '("CATEGORY"))
    (setq org-agenda-window-setup 'only-window)
    )
#+END_SRC

* She sells sea shells

Well, she is a /TRAMP/...

Only use =bash= for shells.  Useful for remote shell through TRAMP

#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/bin/bash")
#+END_SRC

Multi-term for my shell addiction.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :config
    (setq multi-term-program (eval explicit-shell-file-name)))
#+END_SRC

A prettified eshell.

#+BEGIN_SRC emacs-lisp
  (setq eshell-cmpl-cycle-completions nil)

  (defmacro with-face (str &rest properties)
    `(propertize ,str 'face (list ,@properties)))

  (defun fancy-eshell-prompt ()
    "Fancy looking eshell."
    (let ((header-bg "#BBB")
          (header-fg "#000")
          (time-fg   "#C33")
          (user-fg   "#0A2")
          (host-fg   "#0A2")
          (prompt-fg "#0A2"))
      (concat
                                          ; Colored user and hostname
       (with-face user-login-name :foreground user-fg)
       "@"
       (with-face system-name :foreground host-fg)
                                          ; Current directory
       (with-face (concat (eshell/pwd) " ") :background header-bg :foreground header-fg)
                                          ; Current time
       (with-face (format-time-string "(%Y-%m-%d %H:%M:%S) " (current-time)) :background header-bg :foreground time-fg)
                                          ; Version control info of current directory
       (with-face
        (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
        :background header-bg :foreground user-fg)
                                          ; NEW LINE FOR PROMPT
       (with-face "\n" :background header-bg)
                                          ; root prompt should always be red!
       (if (= (user-uid) 0)
           (with-face " #" :foreground "red")
         (with-face " $" :foreground prompt-fg))
       " ")))
  (setq eshell-prompt-function 'fancy-eshell-prompt)
  (setq eshell-highlight-prompt nil)
#+END_SRC

* Version control

** Magit

Probably the best interface to git. It makes me want to code more just
so I can commit more.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)
    ("C-x M-g" . magit-dispatch-popup))
#+END_SRC

* Languages

GDB many open windows for debugging.  This is useful for seeing many things
about your debug session, but does screw the window layout for a bit.

- I'm curious to see how this interacts with frames-only-mode
  - turns out it behaves as the original! (split the current frame
    into 6 windows)

#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t)
#+END_SRC

** Haskell

Useful for managing my xmonad setup.

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
#+END_SRC

** Elisp

Useful for customizing the shit of emacs. Close up those damn parens
in all lisp modes.

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :config
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode))
#+END_SRC

** Matlab

=matlab-mode= for syntax highlighting in .m files, as well as
=matlab-shell= that can be used within emacs.

A nice feature of this is that you can evaluate execution groups (is
that what they're called in Matlab?) right from a .m file.

#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/matlab-emacs")
  ;; (load-library "matlab-load")
  (use-package matlab-mode
    :config
    (matlab-cedet-setup)
;;    (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
    (add-to-list
     'auto-mode-alist
     '("\\.m$" . matlab-mode))
    (setq matlab-indent-function t)
    (setq matlab-shell-command "matlab")
    (setq matlab-completion-technique 'increment))
#+END_SRC

** Maple

~maplev-mode~ for basic syntax highlighting in maple text files. /Note the
file extensions used./

I downloaded this somewhere from the interwebz a long time ago... I
don't see a melpa package for it.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "maple"))
  (autoload 'maplev-mode "maplev" "Maple editing mode" 'interactive)
  (setq auto-mode-alist
        (cons (cons (concat "\\." (regexp-opt '("mpl" "maple") t)
                            "$")
                    'maplev-mode)
              auto-mode-alist))
#+END_SRC

** LaTeX

Ok, so this is a big one too.  AUCTeX+RefTex for LaTeX editing.

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :defer t
    :ensure auctex
    :config
    (setq LaTeX-eqnarray-label "eq")
    (setq LaTeX-equation-label "eq")
    (setq LaTeX-figure-label "fig")
    (setq LaTeX-table-label "tab")
    (setq LaTeX-myChapter-label "chap")
    (setq TeX-newline-function 'reindent-then-newline-and-indent)
    (setq LaTeX-section-hook
          '(LaTeX-section-heading
            LaTeX-section-title
            LaTeX-section-toc
            LaTeX-section-section
            LaTeX-section-label))
    (setq TeX-parse-self t)
    (setq TeX-auto-save t)
    (setq TeX-source-correlate-mode t)
    (setq LaTeX-electric-left-right-brace t)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
    ;; And configure reftex here as well
    (use-package reftex
      :config
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex) ; with AUCTeX LaTeX mode
      (setq reftex-plug-into-AUCTeX t)
;      (setq reftex-toc-split-windows-horizontally t)
      (setq reftex-toc-include-labels t)
      (setq reftex-toc-include-file-boundaries t)
      (setq reftex-auto-recenter-toc t)
      (setq reftex-idle-time 0.5))
    ;; latexmk support within auctex
    (use-package auctex-latexmk
      :config
      (auctex-latexmk-setup))
    ;; Use pdf-tools to open PDF files
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-source-correlate-start-server t)
    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
              #'TeX-revert-document-buffer)
    )
#+END_SRC

** Python

=elpy= has some nice features. Want to use Ipython.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable))
;    (elpy-use-ipython))
#+END_SRC

** Noweb

Configuration for doing noweb stuff.  Uses polymode

#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :config
    (add-to-list 'auto-mode-alist '("\\.nw" . poly-noweb-mode))
    (add-hook 'poly-noweb-mode-hook 'flyspell-mode)) ; enable flyspell
#+END_SRC

* Pdf viewing

=pdf-tools= is a far superior pdf viewer than the default DocView mode
that comes with emacs.

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (use-package org-pdfview
      :ensure t))
#+END_SRC

=interleave-mode= is the perfect way to take notes on pdf documents.

#+BEGIN_SRC emacs-lisp
  (use-package interleave)
#+END_SRC
