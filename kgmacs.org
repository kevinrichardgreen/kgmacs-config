#+TITLE: Configuration file for Emacs
#+DESCRIPTION:

Me:
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Kevin R. Green")
#+END_SRC

* Fundamentals/defaults

Frame titles - incorporate buffer names.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '("%b"))
#+END_SRC

Font.  (set in a way that will work with emacsclient frames)
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((font . "Monospace-10")))
#+END_SRC

Enable things relating to variable pitch font.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c v") 'variable-pitch-mode)
  (use-package mixed-pitch
    ;; :hook
    ;; If you want it in all text modes:
    ;; (text-mode . mixed-pitch-mode)
    :config
    (global-set-key (kbd "C-c m") 'mixed-pitch-mode))
#+END_SRC

Handle the top bars.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

Line & column numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

Disable automatic 'electric' indent (it conflicts with other things!)
#+BEGIN_SRC emacs-lisp
  (electric-indent-mode 0)
#+END_SRC

Smoother scrolling, scroll bar handling
#+BEGIN_SRC emacs-lisp
  (set-scroll-bar-mode nil) ; position of scroll bar
  (setq                     ; smoother scrolling
    scroll-margin 1                   ;; how far from edge before scroll
    scroll-conservatively 100    ;; scroll nicely
    scroll-preserve-screen-position 1) ;; maintain position when pgup/dwn
#+END_SRC

An awesome tool for traversing the undo/redo tree.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+END_SRC

Remember position in a file: keeps ~/ clean,  activated on all buffers
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :init (save-place-mode))
#+END_SRC

Line numbering - relative line numbers in programming and text modes
only. DISABLED FOR NOW - trying all navigation with ~avy~.
#+BEGIN_SRC emacs-lisp
  ;; (use-package linum-relative
  ;;   :config
  ;;   (setq relative-line-numbers-motion-function 'forward-visible-line)
  ;;   (setq linum-relative-current-symbol "")
  ;;   (add-hook 'text-mode-hook 'linum-relative-mode)
  ;;   (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC

Global line highlighting.
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC


Allow certain functions that are disabled by default.
#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'set-goal-column 'disabled nil)
  (put 'scroll-left 'disabled nil)
  (put 'scroll-right 'disabled nil)
#+END_SRC

Scroll buffer in place: [[http://stackoverflow.com/questions/8993183/emacs-scroll-buffer-not-point][StackOverflow]].
#+BEGIN_SRC emacs-lisp
  (defun scroll-down-in-place (n)
    "Scroll the buffer down, keeping the point in place."
    (interactive "p")
    (next-line n)
    (unless (eq (window-start) (point-min))
      (scroll-down n)))

  (defun scroll-up-in-place (n)
    "Scroll the buffer up, keeping the point in place."
    (interactive "p")
    (previous-line n)
    (unless (eq (window-end) (point-max))
      (scroll-up n)))

  (global-set-key "\M-n" 'scroll-up-in-place)
  (global-set-key "\M-p" 'scroll-down-in-place)
#+END_SRC

Use spaces in ~align-regexp~ instead of tabs -- uses old advice syntax.
#+BEGIN_SRC emacs-lisp
  (defadvice align-regexp (around align-regexp-with-spaces activate)
    (let ((indent-tabs-mode nil))
      ad-do-it))
#+END_SRC

Browsing the kill ring.
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring+
    :config
    (browse-kill-ring-default-keybindings))
#+END_SRC

Backup settings. Courtesy of [[http://stackoverflow.com/a/20824625][Stack Overflow]].
#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     delete-old-versions t
     kept-new-versions 10
     kept-old-versions 0
     version-control t)       ; use versioned backups
  (setq vc-make-backup-files t)
  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.emacs_backups/per-save")))

  (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs_backups/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))
  (add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC

Use ~ibuffer~ as default over ~list-buffers~. Group configuration from [[https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/#.WiYJuOmnHRY][Using emacs 34]].
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :config
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq ibuffer-saved-filter-groups
          (quote (("default"  ; define our own default ibuffer view
                   ("Dired" (mode . dired-mode))
                   ("Brain" (filename . "^.*/tmp/brain/.*$"))
                   ("Org" (or
                           (name . "^.*org$")
                           (name . "^.*org_archive$")))
                   ("Programming" (or
                                   (mode . python-mode)
                                   (mode . c++-mode)
                                   (mode . c-mode)
                                   (mode . fortran-mode)
                                   (mode . matlab-mode)))
                   ("Text Files" (or
                                  (name . "^.*txt$")
                                  (name . "^.*toml$")
                                  (name . "^.*yaml$")
                                  (name . "^.*xml$")
                                  (name . "^.*md$")))
                   ("TeX" (or
                           (name . "^.*tex$")
                           (name . "^.*bib$")
                           (name . "^.*nw$")))
                   ("View (pdf,jpgs,etc)" (or
                                            (name . "^.*pdf$")
                                            (mode . image-mode)))
                   ("Shells" (or
                              (mode . eshell-mode)
                              (mode . shell-mode)))
                   ("Email" (or
                             (name . "\*mu4e\*")
                             (mode . mu4e:compose)
                             (mode . mu4e:view)
                             ))
                   ("Magit" (or
                             (name . "\*magit\*")
                             (name . "^magit.*$")))
                   ("Web" (or
                           (mode . web-mode)
                           (mode . js2-mode)
                           (name . "^.*html$")))
                   ("Emacs" (name . "^\\*.*\\*$"))
                   ))))
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-auto-mode 1)
                (ibuffer-switch-to-saved-filter-groups "default")))

    ;; don't show these
                                          ;(add-to-list 'ibuffer-never-show-predicates "zowie")
    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)

    )
#+END_SRC

System cut and paste mapped to <f-> keys.
#+BEGIN_SRC emacs-lisp
  (global-set-key [f5] 'clipboard-kill-region)    ; cut
  (global-set-key [f6] 'clipboard-kill-ring-save) ; copy
  (global-set-key [f7] 'clipboard-yank)    ; paste
#+END_SRC
** Sensible defaults

Sensible defaults, courtesy of [[https://github.com/hrs/sensible-defaults.el][Harry R. Schwartz]].
#+BEGIN_SRC emacs-lisp
  (load-file (expand-file-name "sensible-defaults.el" user-emacs-directory))

  (sensible-defaults/bind-commenting-and-uncommenting)
  (sensible-defaults/bind-keys-to-change-text-size)

  (sensible-defaults/increase-gc-threshold)
  (sensible-defaults/delete-trailing-whitespace)
  (sensible-defaults/treat-camelcase-as-separate-words)
  (sensible-defaults/make-scripts-executable)
  (sensible-defaults/single-space-after-periods)
  (sensible-defaults/offer-to-create-parent-directories-on-save)
  (sensible-defaults/ensure-that-files-end-with-newline)
  (sensible-defaults/quiet-startup)
  (sensible-defaults/make-dired-file-sizes-human-readable)
  (sensible-defaults/shorten-yes-or-no)
  (sensible-defaults/always-highlight-code)
  (sensible-defaults/refresh-buffers-when-files-change)
  (sensible-defaults/show-matching-parens)
  (setq show-paren-style 'expression)     ;; NOTE this goes well with above
  (sensible-defaults/flash-screen-instead-of-ringing-bell)
  (sensible-defaults/yank-to-point-on-mouse-click)
#+END_SRC

** Text scaling

Presentation mode scales all buffers
#+BEGIN_SRC emacs-lisp
  (use-package presentation)
#+END_SRC

*** TODO move all text manipulation modes/settings together

** Window management

Splitting window thresholds that work well for a 1080p monitor.
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 160)
#+END_SRC

Enable =winner-mode=.
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** Distraction-free environments & buffer decorations

*** darkroom

From here: [[https://github.com/joaotavora/darkroom][darkroom]].
#+BEGIN_SRC emacs-lisp
  (require 'darkroom)
#+END_SRC

** Web

Ask for eww open

#+BEGIN_SRC emacs-lisp
  (defalias 'gk-urls-external-browser 'browse-url-xdg-open)

  (defun gk-browse-url (&rest args)
    "Prompt for whether or not to browse with EWW, if no browse
  with external browser."
    (apply
     (if (y-or-n-p "Browse with EWW? ")
         'eww-browse-url
       'gk-urls-external-browser)
     args))

  (setq browse-url-browser-function #'gk-browse-url)
#+END_SRC

** Compilation

Global bindings for fast compile, auto-scroll of compilation window.
#+BEGIN_SRC emacs-lisp
  (global-set-key [f9] 'compile)
  (global-set-key [f10] 'recompile)
  (global-set-key [f12] 'gdb)
#+END_SRC

Better default behaviour of the \*compilation\* buffer.
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
  (setq compilation-auto-jump-to-first-error t)
  (setq compilation-skip-threshold 2) ; don't worry about warnings!
#+END_SRC

* English

~flyspell~ for text files and code files.
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

Better upcase/downcase/capitalize functions
#+BEGIN_SRC emacs-lisp
  (use-package fix-word
    :bind (("M-u" . fix-word-upcase)
           ("M-l" . fix-word-downcase)
           ("M-c" . fix-word-capitalize)))
#+END_SRC

* Files and directories

Open certain directories in dired.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c o")
                  (lambda () (interactive) (find-file "~/Dropbox/Documents/")))
  (global-set-key (kbd "C-c r")
                  (lambda () (interactive) (find-file "~/repositories/")))
#+END_SRC

~wdired~ mode.  Allow changing permissions.
#+BEGIN_SRC emacs-lisp
  (setq wdired-allow-to-change-permissions t)
#+END_SRC

~dired+~ for some more powerful behaviour (Note ~C-u s~ in a dired buffer
lets you quickly change listing switches).
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :config
    (require 'dired+)
    (setq global-dired-hide-details-mode nil) ;; show details by default
    (setq dired-listing-switches "-lh --group-directories-first") ;; don't list all by default
    )
#+END_SRC

Narrowing of ~dired~ directories.
#+BEGIN_SRC emacs-lisp
  (use-package dired-narrow
    :ensure t
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
#+END_SRC

DWIM for copying files between dired buffers that are currently
displayed in windows
#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC

Open files and goto lines like we see from g++ etc. i.e.
=filename:line=. Also useful for noweb source if formatted in this way.
Courtesy of [[https://stackoverflow.com/a/3141456/1899759][StackOverflow]].
#+BEGIN_SRC emacs-lisp
  (defadvice find-file (around find-file-line-number
                               (filename &optional wildcards)
                               activate)
    "Turn files like file.cpp:14 into 'open file.cpp and go to the 14-th line.'"
    (save-match-data
      (let* ((matched (string-match "^\\(.*\\):\\([0-9]+\\):?$" filename))
             (line-number (and matched
                               (match-string 2 filename)
                               (string-to-number (match-string 2 filename))))
             (filename (if matched (match-string 1 filename) filename)))
        ad-do-it
        (when line-number
          ;; goto-line is for interactive use
          (goto-char (point-min))
          (forward-line (1- line-number))))))
#+END_SRC

Assign ffap to a key to save typing ~M-x ffap~ all of the time.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-p") 'find-file-at-point)
#+END_SRC

* Ivy/Swiper/Counsel & Avy

Just as intuitive as IDO, seems lighter weight than helm.
#+BEGIN_SRC emacs-lisp
  (use-package ivy :demand
    :config
    (global-set-key "\C-s" 'swiper)
    (global-set-key "\M-x" 'counsel-M-x)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d "
          enable-recursive-minibuffers t)
    (ivy-mode 1)
    ;; configure regexp engine.
    (setq ivy-re-builders-alist
          ;; allow input not in order
          '((t   . ivy--regex-ignore-order)))
  )
#+END_SRC

Flyspell ivy correction completion.
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-ivy
    :config
    (define-key flyspell-mode-map (kbd "C-'") 'flyspell-correct-previous-word-generic)
  )
#+END_SRC

Better buffer formatting in ~ivy-switch-buffer~.
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after ivy
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)
    (setq ivy-virtual-abbreviate 'full
          ivy-rich-switch-buffer-align-virtual-buffer t
          ivy-rich-path-style 'abbrev)
  )
#+END_SRC

** Avy for fast jumping anywhere visible.

First, enable key chords.
#+BEGIN_SRC emacs-lisp
  (require 'key-chord)
  (key-chord-mode +1)

#+END_SRC

Then set some for avy movement.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :config
    ; define variants that flash the bell
    (defun kg/avy-goto-char-ding ()
     (interactive)
     (ding)
     (call-interactively 'avy-goto-char))
    (defun kg/avy-goto-char-2-ding ()
     (interactive)
     (ding)
     (call-interactively 'avy-goto-char-2))
    (defun kg/avy-goto-word-ding ()
     (interactive)
     (ding)
     (call-interactively 'avy-goto-word-1))
    (key-chord-define-global "kj" 'kg/avy-goto-char-ding)
    (key-chord-define-global "ij" 'avy-goto-line))
#+END_SRC

* Color themes

I use =moe-theme=, which is actually much more than just a color
theme.
#+BEGIN_SRC emacs-lisp
  (use-package moe-theme
    :init
    (setq moe-theme-resize-org-title '(1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0 1.0))
    (setq moe-theme-resize-markdown-title '(1.4 1.3 1.2 1.1 1.0 1.0))
    (setq moe-theme-resize-rst-title '(1.4 1.3 1.2 1.1 1.0 1.0))
    :config
    (moe-theme-set-color 'w/b)
    (moe-dark)
    (use-package spaceline
      :ensure t
      :config
      (setq powerline-default-separator 'wave)
      (spaceline-emacs-theme))
    )
#+END_SRC

* Org mode

=org-mode= is arguably the workhorse of emacs.  Making sure it behaves
as you wish is critical to having a good emacs experience.

** Fundamental org

Basic options for using/displaying =org-mode= in any of the many ways to come.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    ;; Quick keys for linking, dispatching agenda, and capturing
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    ;;
    (setq org-use-property-inheritance '("CATEGORY"))
    (setq org-use-speed-commands t)
    (setq org-fontify-whole-heading-lines t)
    (setq org-html-validation-link nil)
    (setq org-startup-with-inline-images t)
    (setq org-startup-with-latex-preview nil)
    (setq org-image-actual-width 400)
    (setq org-startup-indented t)
    (setq org-hide-emphasis-markers nil)
    (setq org-src-fontify-natively t)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 15.0)))
#+END_SRC

Org bullets are back, baby.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
#+END_SRC

** org-export

Settings for exporting =org-mode= documents.

*** General export options

My general preferences for all types.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-export-initial-scope 'subtree
          org-export-in-background nil
          org-export-with-title nil
          org-export-with-toc 1
          org-export-with-sub-superscripts (quote {})
          org-export-with-section-numbers t))
#+END_SRC

*** \LaTeX export

\LaTeX specific, includes adding my own class for latex export. I'm
sure there is a cleaner way to do all of this, right now it's pretty
hacky between writing to the package alists, redefining hyperref setup
including addition of header contents (that's the only place I could
get it to work with importing org properties).
#+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'ox-latex
      ;; Set how to build the pdf
      (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
      ;; Unfortunately this has to be set entirely just to change hyperref
      (setq org-latex-default-packages-alist
            (quote
             (("AUTO" "inputenc" t
               ("pdflatex"))
              ("T1" "fontenc" t
               ("pdflatex"))
              ("" "graphicx" t nil)
              ("" "grffile" t nil)
              ("" "longtable" nil nil)
              ("" "wrapfig" nil nil)
              ("" "rotating" nil nil)
              ("normalem" "ulem" t nil)
              ("" "amsmath" t nil)
              ("" "textcomp" t nil)
              ("" "amssymb" t nil)
              ("" "capt-of" nil nil)
              ("colorlinks" "hyperref" nil nil)))) ; <-- Only change from default
      ;; Additional packages I like
      (setq org-latex-packages-alist
            (quote (("" "etoolbox" nil)                           ; useful for patchcmd
                    ("margin=1in,headheight=27.2pt" "geometry" nil) ; page margins
                    ("" "fancyhdr" nil)                           ; Move things to header
                    ("" "listings" nil)                           ; nice code formatting
                    ("" "parskip" nil)                            ; no indent paragraphs
                    ("" "color" nil))))                           ; syntax highlighting
      ;; using listings rather than verbatim code sections
      (setq org-latex-listings t)
      (setq org-latex-listings-options (quote (("frame" "single")
                                               ("basicstyle" "\\ttfamily")
                                               ("breaklines" "true"))))
      ;; Display TOC with an hrule below it
      (setq org-latex-toc-command
            "\\tableofcontents\n\n\\vspace{1em}
    \\noindent\\rule{\\textwidth}{0.4pt}\n\n\\vspace{1em}")
      ;; Create a latex class to easily handle my notes, set it to be the default
      (add-to-list 'org-latex-classes
                   '("kgnote"
                     "\\documentclass{article}
      \\usepackage[scaled=0.8]{DejaVuSansMono}
      [DEFAULT-PACKAGES]
      \\def\\UrlBreaks{\\do\\/\\do-}
      [PACKAGES]
      % Configure things from org-latex-(default-)packages-alist here (if you want)
      \\patchcmd{\\thebibliography}{\\section*{\\refname}}{}{}{}
      [EXTRA]"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      ;; Add link colours, set up headers
      (setq org-latex-hyperref-template
            "\\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},
    pdflang={%L},\n citecolor=[rgb]{0.117,0.564,1.0},\n linkcolor=[rgb]{0.117,0.564,1.0},
  urlcolor=[rgb]{0.0, 0.412, 0.243}}\n
      \\pagestyle{fancyplain}
      \\lhead{\\bf %d -- %t}
      \\rhead{\\href{https://github.com/kevinrichardgreen}{%a}}
      \\chead{}\n\n")
      (setq org-latex-default-class "kgnote"))
#+END_SRC

*** Other exports

Misc export formats that I haven't spent much time customizing.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (use-package htmlize)  ; for source code block syntax highlighting
    (use-package ox-twbs) ; Twitter-bootstrap formatted html
    (use-package ox-trac) ; export to trac-wiki to paste into tickets
    (use-package ox-reveal
      :config
      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq org-reveal-mathjax t)))
#+END_SRC

** Agenda

Customizations of my agenda. Calendar view, todo list and refiling.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    ;; sync with Google Calendar
    (setq package-check-signature nil)
    (use-package org-gcal
      :config
      (load "~/Dropbox/Documents/gtd/gcal-details")
      ;; Special key for gcal sync and refresh: G
      ;; (allows agenda update without internet connection via 'g' key)
      (require 'org-agenda)
      (defun org-agenda-gcal-sync-and-redo-all (&optional all)
        (interactive "P")
        (org-gcal-sync)
        (org-agenda-redo-all))
      (define-key org-agenda-mode-map "G" 'org-agenda-gcal-sync-and-redo-all)
      )
    ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
    ;; GTD things
    (setq org-agenda-files '("~/Dropbox/Documents/gtd/gcal.org"
                             "~/Dropbox/Documents/gtd/inbox.org"
                             "~/Dropbox/Documents/gtd/work.org"
                             "~/Dropbox/Documents/gtd/personal.org"))
    (setq org-refile-targets '(("~/Dropbox/Documents/gtd/work.org" :maxlevel . 1)
                               ("~/Dropbox/Documents/gtd/personal.org" :maxlevel . 1)
                               ("~/Dropbox/Documents/gtd/someday.org" :level . 1)))
    ;; Special treatment of mu4e buffers
    (require 'org-mu4e)
    (setq org-mu4e-link-query-in-headers-mode nil)
    ;; Capture templates
    (setq org-capture-templates
          '(
            ("a" "Appointment" entry (file  "~/Dropbox/Documents/gtd/gcal.org" )
             "* %?\n\n%^T\n\n")
            ("f" "File-todo [inbox]" entry (file  "~/Dropbox/Documents/gtd/inbox.org" )
             "* TODO %?\n\n%a\n")
            ("t" "Todo [inbox]" entry
             (file "~/Dropbox/Documents/gtd/inbox.org")
             "* TODO %i%?")))
    ;; My personal brand of keywords
    (setq org-todo-keywords '((sequence "TODO(t!)" "WAITING(w@)" "PROGRESS(p@)" "DELEGATED(g@)"
                                        "|" "DONE(d!)" "DEFERRED(r@)" "CANCELLED(c@)")))
    ;; And a bunch of settings
    (setq org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm
          org-agenda-start-on-weekday nil
          org-agenda-todo-ignore-scheduled "all"
          org-agenda-skip-scheduled-if-done t
          org-deadline-warning-days 5
          org-log-done 'time
          org-agenda-window-setup 'current-window
          org-agenda-span 'week))
#+END_SRC

Archiving done states in a file: [[https://stackoverflow.com/a/27043756/1899759][StackOverflow]] (note as far as I can
tell you /have/ to use a separate lambda for each... maybe a macro or
higher order function would do, but time!)
#+BEGIN_SRC emacs-lisp
  (defun kg/org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/DONE" 'file)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/CANCELLED" 'file)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/DEFERRED" 'file)
  )
#+END_SRC

** org-ref

 [[https://github.com/jkitchin/org-ref][John Kitchen]]'s =org-ref= package.

I currently don't use this to its full potential. I think it is
capable of everything that =ivy-bibtex= is and then some, but I
haven't taken the time to figure it all out yet. It is very useful for
citing references easily in org documents though. For example, squid
axon cite:Hodgkin1952.
#+BEGIN_SRC emacs-lisp
  ;; References inside org-mode documents
  (use-package org-ref
    :config
    (with-eval-after-load 'org
      (setq org-ref-notes-directory "~/Dropbox/Documents/notes/reading"
            org-ref-bibliography-notes "~/Dropbox/Documents/index.org"
            org-ref-default-bibliography '("~/Dropbox/Documents/index.bib")
            org-ref-pdf-directory '("~/Dropbox/Documents/pdf_books/"
                                    "~/Dropbox/Documents/pdf_papers"))
      (setq helm-bibtex-bibliography "~/Dropbox/Documents/index.bib"
            helm-bibtex-library-path '("~/Dropbox/Documents/pdf_books/"
                                       "~/Dropbox/Documents/pdf_papers")
            helm-bibtex-notes-path "~/Dropbox/Documents/notes/reading"
            bibtex-completion-bibliography "~/Dropbox/Documents/index.bib")))
#+END_SRC

** Time stamps

Inactive org-mode style timestamps for today and right now.
#+BEGIN_SRC emacs-lisp
  (defun kg/insert-org-today-inactive () ""
         (interactive)
         (insert (format-time-string "[%Y-%m-%d %a]"))
         )
  (defun kg/insert-org-now-inactive () ""
         (interactive)
         (insert (format-time-string "[%Y-%m-%d %a %H:%M]"))
         )
#+END_SRC

** Daily note files

Open note file for today.
#+BEGIN_SRC emacs-lisp
  (defun kg/note-journal ()
    "Open today's note file, turn off read-only mode."
    (interactive)
    (let ((file (format-time-string "~/Dropbox/Documents/notes/journal/%Y-%B.org"))
          (month (format-time-string "%B"))
          (year  (format-time-string "%Y")))
      (if (file-exists-p file)
          (progn
            (find-file file)
            (end-of-buffer)
            (previous-line 4) ; position the cursor near the bottom
            (setq buffer-read-only nil))
        (progn
          (find-file file)
          (setq buffer-read-only nil)
          (insert (concat "#+TITLE: " month " " year " Journal\n")
          (insert "#+DESCRIPTION: \n")
          (insert "\n\n* \n\n\n* References\n\nbibliography:index.bib bibliographystyle:acm")
          (previous-line 5)
          (end-of-line))))))
#+END_SRC

* She sells sea shells

Well, she is a /TRAMP/...

Set TRAMP connections to use persistent ssh
- default to using rsync over ssh
- super fast file interaction on remote servers.
#+BEGIN_SRC emacs-lisp
  (setq tramp-ssh-controlmaster-options
        (concat
         "-o ControlPath=/tmp/ssh-TRAMP-ControlPath-%%r@%%h:%%p "
         "-o ControlMaster=auto -o ControlPersist=yes"))
  (setq tramp-default-method "rsync")
#+END_SRC

Open an external ~gnome-terminal~ in the remote directory of a TRAMP
buffer. This was pieced together using  elements from:
- https://emacs.stackexchange.com/questions/18903/tramp-and-dired-initial-default-directory-dired-directory
- https://stackoverflow.com/questions/23164073/run-a-shell-command-from-a-specific-directory-in-emacs
- https://unix.stackexchange.com/questions/373186/open-gnome-terminal-window-and-execute-2-commands
#+BEGIN_SRC emacs-lisp
  (defun kg/open-gnome-terminal-remote ()
    "Opens a gnome-terminal at location of current TRAMP buffer
  - ssh to machine using the existing ssh-TRAMP socket
  - fails if not in a TRAMP buffer
  - gnome-terminal closes when remote shell is terminated
    - but shared ssh connection remains"
    (interactive)
    (let* ( ;; break current TRAMP directory into pieces
           (remote-list (split-string (substring-no-properties default-directory) ":"))
           (remote-protocol (nth 0 remote-list))
           (remote-system   (nth 1 remote-list))
           (remote-dir      (nth 2 remote-list))
           ;; set directory to home on local machine
           (default-directory (getenv "HOME"))
           ;; map the %% -> % to be used in our command string
           (ssh-shared-opts (format tramp-ssh-controlmaster-options))
           ;; multiple leves of escaped quotes to avoid single quotes...
           (gt-command (concat
                        "gnome-terminal -e \"sh -c \\\"ssh "
                        ssh-shared-opts " -t "
                        remote-system
                        " \\\\\\\"cd " remote-dir
                        "; exec $SHELL\\\\\\\"\\\"\"")))
      (shell-command gt-command)))

  (defun kg/open-gnome-terminal ()
    "Open a gnome-terminal session in current directory"
    (interactive)
    (if (file-remote-p default-directory)
        (kg/open-gnome-terminal-remote)
      (shell-command "gnome-terminal")))
  ;; Hotkey for gnome terminal -- Think "open {T}erminal"
  (global-set-key (kbd "C-c t") 'kg/open-gnome-terminal)
#+END_SRC

Open a new ~multi-term~ in the remote directory of a TRAMP buffer.
#+BEGIN_SRC emacs-lisp
  (defun kg/open-multi-term-remote ()
    "Opens a multi-term at location of current TRAMP buffer
    - ssh to machine using the existing ssh-TRAMP socket
    - ssh command fails if not in a TRAMP buffer"
    (interactive)
    (multi-term)
    (let* ( ;; break current TRAMP directory into pieces
           (remote-list (split-string (substring-no-properties default-directory) ":"))
           (remote-protocol (nth 0 remote-list))
           (remote-system   (nth 1 remote-list))
           (remote-dir      (nth 2 remote-list))
           ;; set directory to home on local machine
           (default-directory (getenv "HOME"))
           ;; map the %% -> % to be used in our command string
           (ssh-shared-opts (format tramp-ssh-controlmaster-options))
           ;; multiple leves of escaped quotes to avoid single quotes...
           (ssh-command (concat
                         "ssh "
                         ssh-shared-opts " -t "
                         remote-system
                         " \"cd " remote-dir
                         "; exec $SHELL\"")))
      (term-send-raw-string ssh-command)
      (term-send-return)
      (term-send-raw-string "clear")
      (term-send-return)))

  (defun kg/open-multi-term ()
    "Open a mulit-term session in current directory"
    (interactive)
    (if (file-remote-p default-directory)
        (kg/open-multi-term-remote)
      (multi-term)))
#+END_SRC

Only use =bash= for shells.  Useful for remote shell through TRAMP.
#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/bin/bash")
#+END_SRC

A prettified eshell.
#+BEGIN_SRC emacs-lisp
  (setq eshell-cmpl-cycle-completions nil)

  (defmacro with-face (str &rest properties)
    `(propertize ,str 'face (list ,@properties)))

  (defun fancy-eshell-prompt ()
    "Fancy looking eshell."
    (let ((header-bg "#BBB")
          (header-fg "#000")
          (time-fg   "#C33")
          (user-fg   "#0A2")
          (host-fg   "#0A2")
          (prompt-fg "#0A2"))
      (concat
                                          ; Colored user and hostname
       (with-face user-login-name :foreground user-fg)
       "@"
       (with-face system-name :foreground host-fg)
                                          ; Current directory
       (with-face (concat (eshell/pwd) " ") :background header-bg :foreground header-fg)
                                          ; Current time
       (with-face (format-time-string "(%Y-%m-%d %H:%M:%S) "
                                      (current-time)) :background header-bg :foreground time-fg)
                                          ; Version control info of current directory
       (with-face
        (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
        :background header-bg :foreground user-fg)
                                          ; NEW LINE FOR PROMPT
       (with-face "\n" :background header-bg)
                                          ; root prompt should always be red!
       (if (= (user-uid) 0)
           (with-face " #" :foreground "red")
         (with-face " $" :foreground prompt-fg))
       " ")))
  (setq eshell-prompt-function 'fancy-eshell-prompt)
  (setq eshell-highlight-prompt nil)
#+END_SRC

For some reason, my TERM env is set to dumb when ~shell~ is run in
emacs... I want color!
#+BEGIN_SRC emacs-lisp
  (defun my-shell-mode-hook ()
    (process-send-string (get-buffer-process (current-buffer))
                         "export TERM=ansi\n"))
  (add-hook 'shell-mode-hook 'my-shell-mode-hook)
#+END_SRC

Always /try/ to open a ~shell~ in the same window where you are.
#+BEGIN_SRC emacs-lisp
  (push '("\\`\\*shell" display-buffer-same-window (inhibit-same-window)) display-buffer-alist)
#+END_SRC

* Version control

Settings for version control modes.

** Magit

Probably the best interface to =git=. It makes me want to code more just
so I can commit more.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup))
#+END_SRC

* Languages/Programming

GDB many open windows for debugging.  This is useful for seeing many things
about your debug session, but does screw the window layout for a bit (a good use case
for [[*Window management][winner-mode]]).
#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t)
#+END_SRC

Ensure ~minimap-mode~ is available. Don't necessarily turn it on all the
time though.
#+BEGIN_SRC emacs-lisp
  (use-package minimap
    :ensure t)
#+END_SRC

** C/C++

This likely needs to be updated.
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'counsel-gtags-mode)
  (add-hook 'c++-mode-hook 'counsel-gtags-mode)

  (use-package counsel-gtags
    :config
    (define-key counsel-gtags-mode-map (kbd "M-t") 'counsel-gtags-find-definition)
    (define-key counsel-gtags-mode-map (kbd "M-r") 'counsel-gtags-find-reference)
    (define-key counsel-gtags-mode-map (kbd "M-s") 'counsel-gtags-find-symbol)
    (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward))
#+END_SRC

*** TODO Get rtags/counsel configured

** Haskell

Useful for managing my xmonad setup.
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
#+END_SRC

** Elisp

Useful for customizing the shit of emacs. Close up those damn parens
in all lisp modes.
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :config
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode))
#+END_SRC

** Matlab

=matlab-mode= for syntax highlighting in .m files, as well as
=matlab-shell= that can be used within emacs. Since this is done through
=comint=, I can easily run a =matlab-shell= on a remote system and TRAMP
handles everything appropriately.

A nice feature of this is that you can evaluate execution groups (is
that what they're called in Matlab?) right from a .m file
(~C-M-<enter>~).
#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
  (matlab-cedet-setup)
  (add-to-list
   'auto-mode-alist
   '("\\.m$" . matlab-mode))
  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")
  (setq matlab-completion-technique 'increment)
#+END_SRC

** Maple

~maplev-mode~ for basic syntax highlighting in maple text files. /Note the
file extensions used./

I downloaded this somewhere from the interwebz a long time ago... I
don't see a melpa package for it. It is on [[https://github.com/JoeRiel/maplev][GitHub]] however.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "maple"))
  (require 'maplev)
  (autoload 'maplev-mode "maplev" "Maple editing mode" 'interactive)
  (setq auto-mode-alist
        (cons (cons (concat "\\." (regexp-opt '("mpl" "maple") t)
                            "$")
                    'maplev-mode)
              auto-mode-alist))
#+END_SRC

*** TODO Incorporate JoeRiel's maplev github (as a git submodule?)

** LaTeX

Ok, so this is a big one too.  AUCTeX+RefTex for LaTeX editing.
#+BEGIN_SRC emacs-lisp
  (setq LaTeX-eqnarray-label "eq")
  (setq LaTeX-equation-label "eq")
  (setq LaTeX-figure-label "fig")
  (setq LaTeX-table-label "tab")
  (setq LaTeX-myChapter-label "chap")
  (setq TeX-newline-function 'reindent-then-newline-and-indent)
  (setq LaTeX-section-hook
        '(LaTeX-section-heading
          LaTeX-section-title
          LaTeX-section-toc
          LaTeX-section-section
          LaTeX-section-label))
  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
  (setq TeX-source-correlate-mode t)
  (setq LaTeX-electric-left-right-brace t)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
  ;; And configure reftex here as well
  (use-package reftex
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex) ; with AUCTeX LaTeX mode
    (setq reftex-plug-into-AUCTeX t)
                                          ;      (setq reftex-toc-split-windows-horizontally t)
    (setq reftex-toc-include-labels t)
    (setq reftex-toc-include-file-boundaries t)
    (setq reftex-auto-recenter-toc t)
    (setq reftex-idle-time 0.5))
  ;; latexmk support within auctex
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup))
  ;; Use pdf-tools to open PDF files
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)
  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
            #'TeX-revert-document-buffer)
  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "LatexMk")))
#+END_SRC

*** BibTeX

Managing all of my BibTeX entries with =bibtex-utils=.
#+BEGIN_SRC emacs-lisp
  (use-package ivy-bibtex)
  ;; Managing bibtex entries
  (use-package bibtex-utils
    :config
    (setq bu-bibtex-fields-ignore-list '("keywords" "abstract" "file" "issn" "annote"))
    (setq bibtex-align-at-equal-sign t)
    (add-hook 'bibtex-mode-hook (lambda () (set-fill-column 2000))))
#+END_SRC

** Python

=elpy= has some nice features. Want to use Ipython.
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable))
;    (elpy-use-ipython))
#+END_SRC

** Gnuplot

Get the ~gnuplot~ script editing and comint modes.
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :config
    (add-to-list 'auto-mode-alist '("\\.gplt" . gnuplot-mode))
    (gnuplot-inline-display-mode))
#+END_SRC

** Noweb

Configuration for doing noweb stuff.  Uses polymode.
#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :config
    (add-to-list 'auto-mode-alist '("\\.nw" . poly-noweb-mode))
    (add-hook 'poly-noweb-mode-hook 'flyspell-mode)) ; enable flyspell
#+END_SRC

Creating a new noweb chunk. (Does this global binding interfere with
anything? I could perhaps make this for only in ~poly-noweb-mode~).
#+BEGIN_SRC emacs-lisp
  (defun create-new-chunk (chunk-display-name)
    "Create a new noweb chunk with display name from prompt"
    (interactive "sChunk display name (space and . converted to -): ")
    (let* ((chunk-latex-name
            (replace-regexp-in-string " " "-" (replace-regexp-in-string
                                               (regexp-quote ".") "-"
                                               chunk-display-name))))
      (insert "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
              (concat "\\begin{chnk}{" chunk-latex-name "}\n")
              (concat "<<" chunk-display-name ">>=\n\n")
              "@ %def\n"
              "\\end{chnk}\n"
              "%-------------------------------------------------------------------------------\n")
      (previous-line 4)))  ; go back to code entry point before exit
  (global-set-key (kbd "C-c h") 'create-new-chunk)
#+END_SRC

* Pdf viewing

=pdf-tools= is a far superior pdf viewer than the default DocView mode
that comes with emacs.
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-view-resize-factor 1.1)              ;; finer control
    ;; Shorter keystrokes for annotations
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
    (define-key pdf-view-mode-map (kbd "s a") 'pdf-view-auto-slice-minor-mode)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (use-package org-pdfview))
#+END_SRC

Rotating pdf pages, courtesy of [[https://emacs.stackexchange.com/a/24766/16286][StackOverflow]]. Note: This permanently
rotates them in the pdf, not just in this viewer.
#+BEGIN_SRC emacs-lisp
  (defun pdf-view--rotate (&optional counterclockwise-p page-p)
    "Rotate PDF 90 degrees.  Requires pdftk to work.\n
  Clockwise rotation is the default; set COUNTERCLOCKWISE-P to
  non-nil for the other direction.  Rotate the whole document by
  default; set PAGE-P to non-nil to rotate only the current page.
  \nWARNING: overwrites the original file, so be careful!"
    ;; error out when pdftk is not installed
    (if (null (executable-find "pdftk"))
        (error "Rotation requires pdftk")
      ;; only rotate in pdf-view-mode
      (when (eq major-mode 'pdf-view-mode)
        (let* ((rotate (if counterclockwise-p "left" "right"))
               (file   (format "\"%s\"" (pdf-view-buffer-file-name)))
               (page   (pdf-view-current-page))
               (pages  (cond ((not page-p)                        ; whole doc?
                              (format "1-end%s" rotate))
                             ((= page 1)                          ; first page?
                              (format "%d%s %d-end"
                                      page rotate (1+ page)))
                             ((= page (pdf-info-number-of-pages)) ; last page?
                              (format "1-%d %d%s"
                                      (1- page) page rotate))
                             (t                                   ; interior page?
                              (format "1-%d %d%s %d-end"
                                      (1- page) page rotate (1+ page))))))
          ;; empty string if it worked
          (if (string= "" (shell-command-to-string
                           (format (concat "pdftk %s cat %s "
                                           "output %s.NEW "
                                           "&& mv %s.NEW %s")
                                   file pages file file file)))
              (pdf-view-revert-buffer nil t)
            (error "Rotation error!"))))))

  (defun pdf-view-rotate-clockwise (&optional arg)
    "Rotate PDF page 90 degrees clockwise.  With prefix ARG, rotate
  entire document."
    (interactive "P")
    (pdf-view--rotate nil (not arg)))

  (defun pdf-view-rotate-counterclockwise (&optional arg)
    "Rotate PDF page 90 degrees counterclockwise.  With prefix ARG,
  rotate entire document."
    (interactive "P")
    (pdf-view--rotate :counterclockwise (not arg)))

  (define-key pdf-view-mode-map (kbd "R") 'pdf-view-rotate-clockwise)
#+END_SRC

Alternative colour schemes, idea from
[[http://babbagefiles.blogspot.ca/2017/11/more-pdf-tools-tricks.html]].
Get a nice moe-dark-midnight style view.
#+BEGIN_SRC emacs-lisp
  ;; midnite mode hook
  (defun bms/pdf-no-filter ()
    "View pdf without colour filter."
    (interactive)
    (pdf-view-midnight-minor-mode -1)
    )
  ;; change midnite mode colours functions
  (defun bms/pdf-midnite-original ()
    "Set pdf-view-midnight-colors to original colours."
    (interactive)
    (setq pdf-view-midnight-colors '("#839496" . "#002b36" ))
    (pdf-view-midnight-minor-mode)
    )
  (defun bms/pdf-midnite-amber ()
    "Set pdf-view-midnight-colors to amber on dark slate blue."
    (interactive)
    (setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" ))
    (pdf-view-midnight-minor-mode)
    )
  (defun bms/pdf-midnite-green ()
    "Set pdf-view-midnight-colors to green on black."
    (interactive)
    (setq pdf-view-midnight-colors '("#00B800" . "#000000" ))
    (pdf-view-midnight-minor-mode)
    )
  (defun kg/pdf-midnite-moe-dark ()
    "Set pdf-view-midnight-colors to white on moe-dark bg."
    (interactive)
    (setq pdf-view-midnight-colors '("#c6c6c6" . "#303030" ))
    (pdf-view-midnight-minor-mode)
    )
  (defun kg/pdf-midnite-moe-dark-amber ()
    "Set pdf-view-midnight-colors to amber on moe-dark bg."
    (interactive)
    (setq pdf-view-midnight-colors '("#ff9900" . "#303030" ))
    (pdf-view-midnight-minor-mode)
    )
  (defun kg/pdf-midnite-moe-dark-green ()
    "Set pdf-view-midnight-colors to green on moe-dark bg."
    (interactive)
    (setq pdf-view-midnight-colors '("#00B800" . "#303030" ))
    (pdf-view-midnight-minor-mode)
    )
  (defun bms/pdf-midnite-colour-schemes ()
    "Midnight mode colour schemes bound to keys"
    (local-set-key (kbd "!") (quote bms/pdf-no-filter))
    (local-set-key (kbd "@") (quote kg/pdf-midnite-moe-dark))
    (local-set-key (kbd "#") (quote kg/pdf-midnite-moe-dark-amber))
    (local-set-key (kbd "$") (quote kg/pdf-midnite-moe-dark-green))
    )
  (add-hook 'pdf-view-mode-hook 'bms/pdf-midnite-colour-schemes)
  ;; (add-hook 'pdf-view-mode-hook (lambda ()
  ;;                                 (kg/pdf-midnite-moe-dark))) ; automatically selects a midnite mode
#+END_SRC

Taking notes on pdfs. This seems to have better fine-grained control
than =interleave= and fits my workflow better.
#+BEGIN_SRC emacs-lisp
  (use-package org-noter
    :ensure t)
#+END_SRC

* Email

Handling email in emacs. What an amazing integration with everything
else.

** mu4e

Using ~mu4e~. *Setup is for UofS and Gmail accounts.*
- ~offlineimap~ is used for obtaining email (Install from [[https://github.com/OfflineIMAP/offlineimap][GitHub]])
- ~mu~ for indexing mail (from [[https://github.com/djcb/mu][GitHub]])
- ~msmtp~ for sending mail (Ubuntu repo is good enough)

Useful refs:
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/]] :: decent
     for overall setup, with some quirks due to using a mix of the
     'old' way of handling multiple accounts combined with the new
     contexts.
- [[https://notanumber.io/2016-10-03/better-email-with-mu4e/]] :: best
     description of using the newer style of contexts for multiple
     accounts and msmtp for sending.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
  (with-eval-after-load "mu4e"
    (defvar mu4e-bookmarks ;; define before mu4e gets a chance to!
      `(,(make-mu4e-bookmark
          :name  "All Unread messages"
          :query "flag:unread AND NOT flag:trashed"
          :key ?u)
        ,(make-mu4e-bookmark
          :name  "UofS Unread messages"
          :query "flag:unread AND NOT flag:trashed AND maildir:/UofS/INBOX"
          :key ?U)
        ,(make-mu4e-bookmark
          :name  "Gmail Unread messages"
          :query "flag:unread AND NOT flag:trashed AND maildir:/Gmail/INBOX"
          :key ?G)
        ,(make-mu4e-bookmark
          :name "Today's messages"
          :query "date:today..now"
          :key ?t)
        ,(make-mu4e-bookmark
          :name "Last 7 days"
          :query "date:7d..now"
          :key ?w)
        ,(make-mu4e-bookmark
          :name "Messages with images"
          :query "mime:image/*"
          :key ?p)))
    :config
    (setq mail-user-agent 'mu4e-user-agent) ; use mu4e as default
    (setq mu4e-maildir "~/Maildir")
    ;; Sets up contexts for Gmail and UofS accounts
    (setq  mu4e-user-mail-address-list '("kevin.green@usask.ca"
                                         "kevin.richard.green@gmail.com"))
    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "UofS"	  ; University of Saskatchewan account
               :enter-func (lambda () "Switch to UofS context")
               :leave-func (lambda () (setq mu4e-maildir-list nil))
               :match-func (lambda (msg) (when msg
                                           (string-prefix-p
                                            "/UofS"
                                            (mu4e-message-field msg :maildir))))
               :vars '((user-mail-address . "kevin.green@usask.ca")
                       (mu4e-sent-folder . "/UofS/Sent Items")
                       (mu4e-drafts-folder . "/UofS/Drafts")
                       (mu4e-trash-folder . "/UofS/Deleted Items")
                       (mu4e-refile-folder . "/UofS/Archive")
                       ))
             ,(make-mu4e-context
               :name "Gmail"
               :enter-func (lambda () "Switch to Gmail context")
               :leave-func (lambda () (setq mu4e-maildir-list nil))
               :match-func (lambda (msg) (when msg ; anything with /Gmail in the path
                                           (string-prefix-p
                                            "/Gmail"
                                            (mu4e-message-field msg :maildir))))
               :leave-func (lambda () (mu4e-clear-caches))
               :vars '((user-mail-address . "kevin.richard.green@gmail.com")
                       (mu4e-sent-folder . "/Gmail/[Gmail].All Mail")
                       (mu4e-drafts-folder . "/Gmail/[Gmail].Drafts")
                       (mu4e-trash-folder . "/Gmail/[Gmail].Trash")
                       (mu4e-refile-folder . "/Gmail/[Gmail].All Mail")))
             ))

    ;; the maildirs you use frequently; access them with 'j' ('jump')
    (setq   mu4e-maildir-shortcuts
            '(("/UofS/INBOX"         . ?U)
              ("/Gmail/INBOX"        . ?G)))

    ;; (setq mu4e-get-mail-command "offlineimap -o")

    ;; Send mail with externally configured msmtp program.
    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/usr/bin/msmtp")

    ;; This enabled the thread like viewing of email similar to gmail's UI.
    (setq mu4e-headers-include-related t)

    (setq mu4e-attachment-dir  "~/Downloads/mu4e")
    (setq mu4e-update-interval nil)
    ;; inline images
    (setq mu4e-view-show-images t)
    ;; Use imagemagick, if available.
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    ;; Sometimes html email is just not readable in a text based client,
    ;; this lets me open the email in my browser.
    (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)

    ;; spell checking
    (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

    ;; Use ivy for mu4e completions
    (setq mu4e-completing-read-function 'ivy-completing-read)

    ;; This hook correctly modifies the \Inbox and \Starred flags on email when they are marked.
    ;; Without it refiling (archiving) and flagging (starring) email won't properly result in
    ;; the corresponding gmail action.
    (add-hook 'mu4e-mark-execute-pre-hook
              (lambda (mark msg)
                (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
                      ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
                      ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))

    ;; Use the correct account context when sending mail based on the from header.
    (setq message-sendmail-envelope-from 'header)

    (defun choose-msmtp-account ()
      (if (message-mail-p)
          (save-excursion
            (let*
                ((from (save-restriction
                         (message-narrow-to-headers)
                         (message-fetch-field "from")))
                 (account
                  (cond
                   ((string-match "kevin.richard.green@gmail.com" from) "Gmail")
                   ((string-match "kevin.green@usask.ca" from) "UofS"))))
              (setq message-sendmail-extra-arguments (list '"-a" account))))))
    (add-hook 'message-send-mail-hook 'choose-msmtp-account)

    (setq mu4e-headers-visible-lines 20)

    ;; Add date to reply quotes
    (use-package mu-cite
      :config
      (setq mu4e-compose-cite-function 'mu-cite-original)
      (setq mu-cite-top-format '("On " date ",\n" from " wrote:\n\n"))
      (setq mu-cite-prefix-format '("> "))))
#+END_SRC

Attaching files by marking them in dired. From
[[http://www.djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html][mu4e manual]].
#+BEGIN_SRC emacs-lisp
  (require 'gnus-dired)
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

* Brain

Using [[brain:org-brain]] to organize notes and thoughts.
#+BEGIN_SRC emacs-lisp
  (use-package org-brain :ensure t
    :init
    (setq org-brain-path "~/brain")
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/brain/.org-id-locations")
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-file-entries-use-title nil)

    (global-set-key (kbd "C-c b") 'org-brain-visualize)
  )
#+END_SRC

Ignoring =org-brain= files in ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filters
        '(("brain" ((filename . "^.*/brain/.*org$")))))

  (add-hook 'ibuffer-mode-hook
            (lambda nil
              (ibuffer-add-saved-filters "brain")
              (ibuffer-negate-filter)))
#+END_SRC

* References

Generally linked in place, otherwise here:

bibliography:index.bib bibliographystyle:acm
